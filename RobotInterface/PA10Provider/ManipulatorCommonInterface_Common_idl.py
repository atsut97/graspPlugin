# Python stubs generated by omniidl from ManipulatorCommonInterface_Common.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)


#
# Start of module "_GlobalIDL"
#
__name__ = "_GlobalIDL"
_0__GlobalIDL = omniORB.openModule("_GlobalIDL", r"ManipulatorCommonInterface_Common.idl")
_0__GlobalIDL__POA = omniORB.openModule("_GlobalIDL__POA", r"ManipulatorCommonInterface_Common.idl")

# #include "BasicDataType.idl"
import BasicDataType_idl
_0_RTC = omniORB.openModule("RTC")
_0_RTC__POA = omniORB.openModule("RTC__POA")
# #include "ManipulatorCommonInterface_DataTypes.idl"
import ManipulatorCommonInterface_DataTypes_idl
_0_RTC = omniORB.openModule("RTC")
_0_RTC__POA = omniORB.openModule("RTC__POA")

#
# Start of module "RTC"
#
__name__ = "RTC"
_0_RTC = omniORB.openModule("RTC", r"ManipulatorCommonInterface_Common.idl")
_0_RTC__POA = omniORB.openModule("RTC__POA", r"ManipulatorCommonInterface_Common.idl")


# enum AlarmType
_0_RTC.FAULT = omniORB.EnumItem("FAULT", 0)
_0_RTC.WARNING = omniORB.EnumItem("WARNING", 1)
_0_RTC.UNKNOWN = omniORB.EnumItem("UNKNOWN", 2)
_0_RTC.AlarmType = omniORB.Enum("IDL:RTC/AlarmType:1.0", (_0_RTC.FAULT, _0_RTC.WARNING, _0_RTC.UNKNOWN,))

_0_RTC._d_AlarmType  = (omniORB.tcInternal.tv_enum, _0_RTC.AlarmType._NP_RepositoryId, "AlarmType", _0_RTC.AlarmType._items)
_0_RTC._tc_AlarmType = omniORB.tcInternal.createTypeCode(_0_RTC._d_AlarmType)
omniORB.registerType(_0_RTC.AlarmType._NP_RepositoryId, _0_RTC._d_AlarmType, _0_RTC._tc_AlarmType)

# struct Alarm
_0_RTC.Alarm = omniORB.newEmptyClass()
class Alarm (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/Alarm:1.0"

    def __init__(self, code, type, description):
        self.code = code
        self.type = type
        self.description = description

_0_RTC.Alarm = Alarm
_0_RTC._d_Alarm  = (omniORB.tcInternal.tv_struct, Alarm, Alarm._NP_RepositoryId, "Alarm", "code", omniORB.tcInternal.tv_ulong, "type", omniORB.typeMapping["IDL:RTC/AlarmType:1.0"], "description", (omniORB.tcInternal.tv_string,0))
_0_RTC._tc_Alarm = omniORB.tcInternal.createTypeCode(_0_RTC._d_Alarm)
omniORB.registerType(Alarm._NP_RepositoryId, _0_RTC._d_Alarm, _0_RTC._tc_Alarm)
del Alarm

# typedef ... AlarmSeq
class AlarmSeq:
    _NP_RepositoryId = "IDL:RTC/AlarmSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.AlarmSeq = AlarmSeq
_0_RTC._d_AlarmSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/Alarm:1.0"], 0)
_0_RTC._ad_AlarmSeq = (omniORB.tcInternal.tv_alias, AlarmSeq._NP_RepositoryId, "AlarmSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/Alarm:1.0"], 0))
_0_RTC._tc_AlarmSeq = omniORB.tcInternal.createTypeCode(_0_RTC._ad_AlarmSeq)
omniORB.registerType(AlarmSeq._NP_RepositoryId, _0_RTC._ad_AlarmSeq, _0_RTC._tc_AlarmSeq)
del AlarmSeq

# typedef ... LimitSeq
class LimitSeq:
    _NP_RepositoryId = "IDL:RTC/LimitSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.LimitSeq = LimitSeq
_0_RTC._d_LimitSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/LimitValue:1.0"], 0)
_0_RTC._ad_LimitSeq = (omniORB.tcInternal.tv_alias, LimitSeq._NP_RepositoryId, "LimitSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RTC/LimitValue:1.0"], 0))
_0_RTC._tc_LimitSeq = omniORB.tcInternal.createTypeCode(_0_RTC._ad_LimitSeq)
omniORB.registerType(LimitSeq._NP_RepositoryId, _0_RTC._ad_LimitSeq, _0_RTC._tc_LimitSeq)
del LimitSeq

# struct ManipInfo
_0_RTC.ManipInfo = omniORB.newEmptyClass()
class ManipInfo (omniORB.StructBase):
    _NP_RepositoryId = "IDL:RTC/ManipInfo:1.0"

    def __init__(self, manufactur, type, axisNum, cmdCycle, isGripper):
        self.manufactur = manufactur
        self.type = type
        self.axisNum = axisNum
        self.cmdCycle = cmdCycle
        self.isGripper = isGripper

_0_RTC.ManipInfo = ManipInfo
_0_RTC._d_ManipInfo  = (omniORB.tcInternal.tv_struct, ManipInfo, ManipInfo._NP_RepositoryId, "ManipInfo", "manufactur", (omniORB.tcInternal.tv_string,0), "type", (omniORB.tcInternal.tv_string,0), "axisNum", omniORB.typeMapping["IDL:RTC/ULONG:1.0"], "cmdCycle", omniORB.typeMapping["IDL:RTC/ULONG:1.0"], "isGripper", omniORB.tcInternal.tv_boolean)
_0_RTC._tc_ManipInfo = omniORB.tcInternal.createTypeCode(_0_RTC._d_ManipInfo)
omniORB.registerType(ManipInfo._NP_RepositoryId, _0_RTC._d_ManipInfo, _0_RTC._tc_ManipInfo)
del ManipInfo
_0_RTC.CONST_BINARY_00000001 = 1
_0_RTC.CONST_BINARY_00000010 = 2
_0_RTC.CONST_BINARY_00000100 = 4
_0_RTC.CONST_BINARY_00001000 = 8

#
# End of module "RTC"
#
__name__ = "_GlobalIDL"


# interface ManipulatorCommonInterface_Common
_0__GlobalIDL._d_ManipulatorCommonInterface_Common = (omniORB.tcInternal.tv_objref, "IDL:ManipulatorCommonInterface_Common:1.0", "ManipulatorCommonInterface_Common")
omniORB.typeMapping["IDL:ManipulatorCommonInterface_Common:1.0"] = _0__GlobalIDL._d_ManipulatorCommonInterface_Common
_0__GlobalIDL.ManipulatorCommonInterface_Common = omniORB.newEmptyClass()
class ManipulatorCommonInterface_Common :
    _NP_RepositoryId = _0__GlobalIDL._d_ManipulatorCommonInterface_Common[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0__GlobalIDL.ManipulatorCommonInterface_Common = ManipulatorCommonInterface_Common
_0__GlobalIDL._tc_ManipulatorCommonInterface_Common = omniORB.tcInternal.createTypeCode(_0__GlobalIDL._d_ManipulatorCommonInterface_Common)
omniORB.registerType(ManipulatorCommonInterface_Common._NP_RepositoryId, _0__GlobalIDL._d_ManipulatorCommonInterface_Common, _0__GlobalIDL._tc_ManipulatorCommonInterface_Common)

# ManipulatorCommonInterface_Common operations and attributes
ManipulatorCommonInterface_Common._d_clearAlarms = ((), (omniORB.typeMapping["IDL:RTC/RETURN_ID:1.0"], ), None)
ManipulatorCommonInterface_Common._d_getActiveAlarm = ((), (omniORB.typeMapping["IDL:RTC/RETURN_ID:1.0"], omniORB.typeMapping["IDL:RTC/AlarmSeq:1.0"]), None)
ManipulatorCommonInterface_Common._d_getFeedbackPosJoint = ((), (omniORB.typeMapping["IDL:RTC/RETURN_ID:1.0"], omniORB.typeMapping["IDL:RTC/JointPos:1.0"]), None)
ManipulatorCommonInterface_Common._d_getManipInfo = ((), (omniORB.typeMapping["IDL:RTC/RETURN_ID:1.0"], omniORB.typeMapping["IDL:RTC/ManipInfo:1.0"]), None)
ManipulatorCommonInterface_Common._d_getSoftLimitJoint = ((), (omniORB.typeMapping["IDL:RTC/RETURN_ID:1.0"], omniORB.typeMapping["IDL:RTC/LimitSeq:1.0"]), None)
ManipulatorCommonInterface_Common._d_getState = ((), (omniORB.typeMapping["IDL:RTC/RETURN_ID:1.0"], omniORB.typeMapping["IDL:RTC/ULONG:1.0"]), None)
ManipulatorCommonInterface_Common._d_servoOFF = ((), (omniORB.typeMapping["IDL:RTC/RETURN_ID:1.0"], ), None)
ManipulatorCommonInterface_Common._d_servoON = ((), (omniORB.typeMapping["IDL:RTC/RETURN_ID:1.0"], ), None)
ManipulatorCommonInterface_Common._d_setSoftLimitJoint = ((omniORB.typeMapping["IDL:RTC/LimitSeq:1.0"], ), (omniORB.typeMapping["IDL:RTC/RETURN_ID:1.0"], ), None)

# ManipulatorCommonInterface_Common object reference
class _objref_ManipulatorCommonInterface_Common (CORBA.Object):
    _NP_RepositoryId = ManipulatorCommonInterface_Common._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def clearAlarms(self, *args):
        return _omnipy.invoke(self, "clearAlarms", _0__GlobalIDL.ManipulatorCommonInterface_Common._d_clearAlarms, args)

    def getActiveAlarm(self, *args):
        return _omnipy.invoke(self, "getActiveAlarm", _0__GlobalIDL.ManipulatorCommonInterface_Common._d_getActiveAlarm, args)

    def getFeedbackPosJoint(self, *args):
        return _omnipy.invoke(self, "getFeedbackPosJoint", _0__GlobalIDL.ManipulatorCommonInterface_Common._d_getFeedbackPosJoint, args)

    def getManipInfo(self, *args):
        return _omnipy.invoke(self, "getManipInfo", _0__GlobalIDL.ManipulatorCommonInterface_Common._d_getManipInfo, args)

    def getSoftLimitJoint(self, *args):
        return _omnipy.invoke(self, "getSoftLimitJoint", _0__GlobalIDL.ManipulatorCommonInterface_Common._d_getSoftLimitJoint, args)

    def getState(self, *args):
        return _omnipy.invoke(self, "getState", _0__GlobalIDL.ManipulatorCommonInterface_Common._d_getState, args)

    def servoOFF(self, *args):
        return _omnipy.invoke(self, "servoOFF", _0__GlobalIDL.ManipulatorCommonInterface_Common._d_servoOFF, args)

    def servoON(self, *args):
        return _omnipy.invoke(self, "servoON", _0__GlobalIDL.ManipulatorCommonInterface_Common._d_servoON, args)

    def setSoftLimitJoint(self, *args):
        return _omnipy.invoke(self, "setSoftLimitJoint", _0__GlobalIDL.ManipulatorCommonInterface_Common._d_setSoftLimitJoint, args)

    __methods__ = ["clearAlarms", "getActiveAlarm", "getFeedbackPosJoint", "getManipInfo", "getSoftLimitJoint", "getState", "servoOFF", "servoON", "setSoftLimitJoint"] + CORBA.Object.__methods__

omniORB.registerObjref(ManipulatorCommonInterface_Common._NP_RepositoryId, _objref_ManipulatorCommonInterface_Common)
_0__GlobalIDL._objref_ManipulatorCommonInterface_Common = _objref_ManipulatorCommonInterface_Common
del ManipulatorCommonInterface_Common, _objref_ManipulatorCommonInterface_Common

# ManipulatorCommonInterface_Common skeleton
__name__ = "_GlobalIDL__POA"
class ManipulatorCommonInterface_Common (PortableServer.Servant):
    _NP_RepositoryId = _0__GlobalIDL.ManipulatorCommonInterface_Common._NP_RepositoryId


    _omni_op_d = {"clearAlarms": _0__GlobalIDL.ManipulatorCommonInterface_Common._d_clearAlarms, "getActiveAlarm": _0__GlobalIDL.ManipulatorCommonInterface_Common._d_getActiveAlarm, "getFeedbackPosJoint": _0__GlobalIDL.ManipulatorCommonInterface_Common._d_getFeedbackPosJoint, "getManipInfo": _0__GlobalIDL.ManipulatorCommonInterface_Common._d_getManipInfo, "getSoftLimitJoint": _0__GlobalIDL.ManipulatorCommonInterface_Common._d_getSoftLimitJoint, "getState": _0__GlobalIDL.ManipulatorCommonInterface_Common._d_getState, "servoOFF": _0__GlobalIDL.ManipulatorCommonInterface_Common._d_servoOFF, "servoON": _0__GlobalIDL.ManipulatorCommonInterface_Common._d_servoON, "setSoftLimitJoint": _0__GlobalIDL.ManipulatorCommonInterface_Common._d_setSoftLimitJoint}

ManipulatorCommonInterface_Common._omni_skeleton = ManipulatorCommonInterface_Common
_0__GlobalIDL__POA.ManipulatorCommonInterface_Common = ManipulatorCommonInterface_Common
omniORB.registerSkeleton(ManipulatorCommonInterface_Common._NP_RepositoryId, ManipulatorCommonInterface_Common)
del ManipulatorCommonInterface_Common
__name__ = "_GlobalIDL"

#
# End of module "_GlobalIDL"
#
__name__ = "ManipulatorCommonInterface_Common_idl"

_exported_modules = ( "RTC", "_GlobalIDL")

# The end.
